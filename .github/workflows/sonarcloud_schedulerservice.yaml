name: SonarCloud - SchedulerService
on:
  workflow_dispatch:
  push:
    paths:
      [
        "csharp/Common/**",
        "csharp/SchedulerService/**",
        "csharp/Tests/SchedulerService.Tests/**",
        "csharp/Tests/Common.Tests/**",
        ".github/workflows/sonarcloud_schedulerservice.yaml",
        ".github/workflows/schedulerservice.yaml",
      ]
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      [
        "csharp/Common/**",
        "csharp/SchedulerService/**",
        "csharp/Tests/SchedulerService.Tests/**",
        "csharp/Tests/Common.Tests/**",
        ".github/workflows/sonarcloud_schedulerservice.yaml",
        ".github/workflows/schedulerservice.yaml",
      ]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu" # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install sonar dotnet coverage tool
        shell: bash
        run: |
          dotnet tool install --global dotnet-coverage
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_VERBOSE: "true"
        shell: bash
        run: |
          #!/usr/bin/env bash
          set -e

          # Start SonarCloud analysis
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"enicky_schedulerservice" \
            /o:"enicky" /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths=coverage.opencover.xml \
            /d:sonar.verbose=true

          # Restore and build
          dotnet restore ./csharp/SchedulerService/SchedulerService.csproj
          dotnet restore ./csharp/Common/Common.csproj
          dotnet build ./csharp/SchedulerService/SchedulerService.csproj --no-incremental --no-restore
          dotnet build ./csharp/Common/Common.csproj --no-incremental --no-restore

          # Run tests and collect coverage for each test project
          dotnet test ./csharp/Tests/SchedulerService.Tests/SchedulerService.Tests.csproj --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          cp ./csharp/Tests/SchedulerService.Tests/TestResults/**/coverage.opencover.xml coverage1.opencover.xml

          dotnet test ./csharp/Tests/Common.Tests/Common.Tests.csproj --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          cp ./csharp/Tests/Common.Tests/TestResults/**/coverage.opencover.xml coverage2.opencover.xml

          # Merge coverage files
          reportgenerator -reports:coverage1.opencover.xml;coverage2.opencover.xml --targetdir:coveragereport --reporttypes:opencover --filefilters:-*Tests.dll
          cp coveragereport/opencover.xml coverage.opencover.xml

          # End SonarCloud analysis
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${SONAR_TOKEN}"
      - uses: actions/upload-artifact@v4
        with:
          path: coverage.opencover.xml
